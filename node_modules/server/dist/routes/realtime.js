import { Router } from 'express';
import { validate } from '../utils/validate.js';
import { z } from 'zod';
import { ParkingService } from '../services/parkingService.js';
export const realtimeRouter = Router();
const parkingService = new ParkingService();
// Test database connection endpoint
realtimeRouter.get('/test', async (_req, res) => {
    try {
        const result = await parkingService.testConnection();
        if (result.success) {
            res.json({ message: 'Database connection successful', data: result.data });
        }
        else {
            res.status(500).json({ error: 'Database connection failed', details: result.error });
        }
    }
    catch (error) {
        res.status(500).json({ error: 'Database test failed', message: error.message });
    }
});
// Get all available parking zones
realtimeRouter.get('/zones', async (_req, res) => {
    try {
        const zones = await parkingService.getAvailableZones();
        res.json({ zones });
    }
    catch (error) {
        res.status(500).json({
            error: {
                code: 'DatabaseError',
                message: error.message
            }
        });
    }
});
// Query schema for real-time spots
const realtimeQuerySchema = z.object({
    query: z.object({
        area: z.string().default('7000'), // Changed to string to match Zone_Number
        hour: z.coerce.number().min(0).max(23).default(12),
        demand: z.enum(['High', 'Medium', 'Low']).default('Medium'),
    })
});
// Get real-time parking spots
realtimeRouter.get('/spots', validate(realtimeQuerySchema), async (req, res) => {
    try {
        const { area, hour, demand } = req.query;
        const data = await parkingService.getRealTimeSpots(area, hour, demand);
        res.json(data);
    }
    catch (error) {
        res.status(500).json({
            error: {
                code: 'DatabaseError',
                message: error.message
            }
        });
    }
});
// Get parking zone statistics
realtimeRouter.get('/stats', async (_req, res) => {
    try {
        const stats = await parkingService.getZoneStats();
        res.json({ stats });
    }
    catch (error) {
        res.status(500).json({
            error: {
                code: 'DatabaseError',
                message: error.message
            }
        });
    }
});
//# sourceMappingURL=realtime.js.map